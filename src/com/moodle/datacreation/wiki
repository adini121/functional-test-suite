<html>
<body class="c16">
<h1 class="c6"><span>Introduction</span></h1>
<h2 class="c6"><span>Purpose</span>
</h2><p class="c2"><span>The purpose of this document is to define a high level QA strategy at Moodle and communicate that process to the relevant stakeholders. This document is loosely based upon the IEEE829 standard for software testing documentation; adaptations have been made to this standard to make the document more lightweight, suitable for use in an agile process and relevant to the organisation. </span></p>
<p class="c2"><span>This document is test centric, only explaining the development process from a testing point of view. The scope of this document does not cover the details of the entire development process at Moodle but how testing is applied to it. This document also discusses potential benefits to the organisation of the processes discussed.</span>
</p>
<h2 class="c6"><span>Scope</span></h2>
<p class="c6"><span>This document encompasses all testing activities at Moodle and how they will be performed. This includes:</span></p><ol class="c12" start="1"><li class="c10 c6"><span>Testing methodology at Moodle</span></li><li class="c10 c6"><span>How testing applies to the Moodle development life cycle</span></li><li class="c10 c6"><span>Managing legacy items</span></li><li class="c10 c6"><span>Hardware requirements</span></li><li class="c10 c6"><span>Testing tools and how they will be used</span></li><li class="c10 c6"><span>Test Environments</span></li><li class="c10 c6"><span>Roles and responsibilities</span></li><li class="c10 c6"><span>Training requirements</span></li></ol><h1 class="c6"><span>Testing Methodology at Moodle</span></h1><p class="c2"><span>The full </span><span><a class="c7" href="http://docs.moodle.org/dev/Process">development life-cycle</a></span><span>&nbsp;at Moodle is documented in detail </span><span><a class="c7" href="http://docs.moodle.org/dev/Process">elsewhere</a></span><span>. Moodle is currently developed using agile methodologies including scrum. The following stages of development take place within this life-cycle:</span></p><ol class="c12" start="1"><li class="c2 c10"><span>Weekly integration cycle</span></li><li class="c10 c2"><span>3 weekly stable sprints</span></li><li class="c10 c2"><span>6 monthly major releases</span></li><li class="c10 c2"><span>3 point releases between every major release</span></li></ol><h2 class="c6"><span>Testing Methodology</span></h2><p class="c2"><span>It is desirable on an agile project that a process of test driven development and continuous integration (CI) is performed. The aim of this is to increase business value and return on investment (ROI) by allowing software defects and issues - such as conflicting or problematic requirements - to be detected early in the software development life cycle (SDLC) when they can be resolved more easily. Although some manual testing is still required; to provide frequent and swift feedback, it is desirable that test automation is used where possible. </span></p><p class="c2"><span>Currently there are no definition of distinct testing methodologies at Moodle. To give context to what types of tests should run and when, Moodle will adopt a process of categorising distinct types of test and their purpose. </span></p><p class="c2"><span>Leading agile testing exponent, Brian Marick, introduced the concept of testing quadrants to define different categories of tests that accomplish different purposes:</span></p><p class="c6"><span>Lisa Crispin and Janet Gregory explain these quadrants in detail in their book: &ldquo;Agile Testing: A Practical Guide or Testers and Agile Teams&rdquo;. To summarise, this is a list of traditional testing disciplines categorised relative to their context in an Agile process such as scrum. </span><img height="510" src="images/image08.png" width="642"></p><p class="c2"><span>Moodle is open source, community based software and this poses a number of unique challenges to a test driven, agile, process. Because Moodle is community based, with features and bug fixes developed externally and submitted to integration, some forms of testing defined here, such as paper prototyping, may not be relevant to the organisation. This section is therefore intended as reference material only, with the methods of testing described in this section being potential weapons in Moodle&#39;s testing arsenal; actual testing process will be defined later in the document.</span></p><p class="c2"><span>Moodle will adopt the agile testing quadrant to define testing categories relevant to the organisation and facilitate communication of required testing on Moodle projects. </span></p><h3 class="c6"><span>Quadrant Terms Explained</span></h3><ol class="c12" start="1"><li class="c9 c2"><span>Tests that support the team &ndash; tests that assist with development and requirements gathering.</span></li><li class="c9 c2"><span>Tests that critique the product &ndash; constructive appraisal of the software under test to drive future development.</span></li><li class="c9 c2"><span>Technology facing &ndash; tests that verify scientific and technological aspects of the software under test.</span></li></ol><p class="c0"><span></span></p><hr style="page-break-before:always;display:none;"><ol class="c12" start="4"><li class="c9 c2"><span>Business facing &ndash; tests that verify the business logic, processes and communicate user requirements.</span></li></ol><h3 class="c6"><span>Testing Disciplines Explained</span></h3><ol class="c12" start="1"><li class="c9 c2"><span>Functional Testing &ndash; Interacting positively and negatively with the software under test the way a user or process would, with specific expectations of inputs and outputs from the system under test.</span></li><li class="c9 c2"><span>Examples &ndash; Examples of user scenarios.</span></li><li class="c9 c2"><span>Story Tests &ndash; Defining a development story using a test.</span></li><li class="c9 c2"><span>Prototypes &ndash; e.g. paper prototyping of the system under development to gather and communicate customer requirements for the user interface.</span></li><li class="c9 c2"><span>Simulations &ndash; e.g. Wizard of Oz testing; similar to paper prototyping but involving inputs to and outputs from a human representing the system. Used for gathering functional requirements from users.</span></li><li class="c9 c2"><span>Unit testing &ndash; testing the behaviour of a particular piece of code.</span></li><li class="c9 c2"><span>Component testing &ndash; testing the interaction of interrelated pieces of code.</span></li><li class="c9 c2"><span>Exploratory testing &ndash; freestyle testing of the system under test. The scope of exploratory testing can be limited by defined constraints.</span></li><li class="c9 c2"><span>Scenarios &ndash; Specific business scenarios.</span></li><li class="c2 c9"><span>Usability testing &ndash; Using roles to exercise the system in a way the user might (something Moodle already does).</span></li><li class="c9 c2"><span>UAT &ndash; Real users executing tests to evaluate it&#39;s suitability relevant to business requirements.</span></li><li class="c9 c2"><span>Alpha/Beta &ndash; Suitable for software distributed to a large customer base where formal UAT may not be practical. Both have a similar goal to UAT. Alpha is an early distribution of the software, that may not be fully complete, to selected users for early feedback. Beta is distribution of almost finished software to users.</span></li><li class="c9 c2"><span>Performance and Load Testing &ndash; Testing the responsiveness of the software in normal circumstances and under high usage conditions.</span></li><li class="c9 c2"><span>Security Testing &ndash; Testing application security features.</span></li><li class="c9 c2"><span>&#39;ility&#39; Testing &ndash; Security, Maintainability, Interoperability, Compatibility, Scalability etc. etc.</span></li></ol><h1 class="c5"><span></span></h1><hr style="page-break-before:always;display:none;"><h1 class="c6"><span class="c3">Methodologies in the Moodle Development Process</span></h1><p class="c2"><span>As previously discussed, Moodle has an established process for developing and integrating software. This section applies relevant testing methodology to the existing process.</span></p><p class="c2"><span>Generally a re-usable automated suite of functional regression tests, a test automation harness, it&#39;s supporting infrastructure and phased development of regular automated functional regression tests will be developed in an iterative manner using scrum. Initially these test cases will be based upon the current user acceptance test cases. The tools and other aspects of automation will be discussed later in the document.</span></p><h2 class="c6"><span>Weekly (Continuous) Integration Cycle</span></h2><p class="c2"><span>Current testing of integration issues occurs towards the end of the SDLC at Moodle during the Wednesday (AWST) testing phase. This is the last possible chance Moodle gets to capture regressions. It will result in the late discovery of regressions during unguided exploratory testing and worse still the introduction of regressions into Master. Discovery of issues late in the SDLC prevent the issues from being dealt with in a timely manner when integrators are able to resolve those issues relatively easily. </span></p><p class="c2"><span>The processes described here will move the bulk of testing and the majority of responsibility for capturing regressions from the Wednesday testing phase to earlier in the SDLC whilst also increasing test coverage.</span></p><h3 class="c6"><span>Continuous Integration (CI)</span></h3><p class="c2"><span>Continuous integration provides early feedback of problematic code to the team. We will know early in the SDLC whether a working version of the code is available and what to do to make it work.</span></p><p class="c2"><span>A CI server currently exists for the integration process. This server will be moved to a VM on the VM Server.</span></p><h3 class="c6"><span>Functional Test Automation</span></h3><p class="c2"><span>Frequently running tests similar to those currently executed during the 6 monthly major release &nbsp;more regularly, earlier in the SDLC will assist with trapping regression issues at the point where integration into the existing code base occurs. This will help integrators either:</span></p><ol class="c19" start="1"><li class="c9 c2"><span>Protect existing code by allowing integrators to stop the new code being added.</span></li><li class="c9 c2"><span>Allow the immediate rectification of the regression issues at integration rather than finding them later in the SDLC.</span></li></ol><p class="c2"><span>The weekly integration cycle has a phase of manual bug retesting throughout the working day on Wednesdays (AWST). &nbsp;The automated functional regression suite described above will run outside of working hours (AWST) and can be run as often as required. The set up of test VMs will be performed by the </span></p><h3 class="c6"><span>Performance Testing Matrix</span></h3><p class="c2"><span>Measuring system performance during this testing will assist with preventing degradation of performance in existing code caused by regressions.</span></p><p class="c2"><span>To assist with early capture of performance degradation due to regression; a performance matrix will record performance against automated user interactions generated by the functional test harness.</span></p><p class="c2"><span>Consideration will be given to modifying the functional test harness, selecting relevant test cases that will be re-run a given number of times to generate aggregated results as part of a performance and load suite. i.e. running the same test several times as part of a suite of tests in one &ldquo;test run&rdquo; will provide more accurate performance data, providing mean values, than running a test once.</span></p><h3 class="c6"><span>New Unit Tests</span></h3><p class="c2"><span>Creating unit tests prior to creating the code starts the whole SDLC off with a focus on quality. If the code isn&#39;t considered complete until the test passes then the code itself will be of a high quality by the time it is implemented. It also creates a repository of unit regression tests in an iterative manner whilst not requiring of a great deal of extra effort to write those tests. As these tests are added, they will provide early regression testing on new code.</span></p><p class="c2"><span>The various XUnit code driven unit testing frameworks are universally popular, incredibly powerful and the industry standard for unit testing tools. PHPUnit will provide developers with a more powerful suite of tools for unit testing.</span></p><p class="c2"><span>Everything submitted to integration must include unit tests in PHPUnit. It is to be encouraged that anyone developing software for Moodle should work in a test driven manner, where unit tests are written before writing the code that makes the test pass. The unit tests will remain with the system under test and can be run as regression tests using a CI server. The tests will run whenever any new code is added to any monitored GIT repository.</span></p><h3 class="c6"><span>Legacy Unit Tests</span></h3><p class="c2"><span>Legacy unit tests are not run automatically. These tests can be run automatically on a regular basis via CI. Running these using CI, even using a workaround by executing them automatically via the Moodle user interface, will provide early regression testing on legacy code.</span></p><p class="c2"><span>Unit tests are currently written using the SimpleTest tool. These tests are included with Moodle and can be run as an Admin user. These legacy tests must run automatically using a CI server.</span></p><h3 class="c6"><span>Causal Analysis of Issues</span></h3><p class="c2"><span>As part of the weekly integration cycle, issues will be analysed and documented to determine the likely cause of the issue. The analysis will provide metrics for determining and removing areas of risk where defects are injected during development.</span></p><p class="c2"><span>The metrics gathered during this exercise can be used to identify problem areas of the system.</span></p><ol class="c19" start="1"><li class="c9 c2"><span>Problematic areas of the system can be tested more thoroughly than less problematic areas.</span></li><li class="c9 c2"><span>The cause of the issues can be identified and eliminated.</span></li></ol><p class="c2"><span>Fewer route causes of issues will reduce the number of issues and increase ROI and overall quality.</span></p><h3 class="c6"><span>Restricted Scope Manual Testing</span></h3><p class="c2"><span>The scope of testing issue fixes must be limited to retesting the issue itself. Clear instructions to specifically recreate the issue must be included in the testing instructions of the issue.</span></p><p class="c2"><span>Restricting the scope of manual testing during the Wednesday (AWST) testing phase will reduce the effort required to retest the issues and yet there will actually be more testing performed than there is at the moment and earlier in the SDLC. This will only be possible if those raising issues provide precise instructions for recreating the problem.</span></p><h2 class="c6"><span>Stable Sprints</span></h2><p class="c2"><span>Development work during stable sprints is performed in-house by Moodle HQ developers and will follow a process of Test Driven Development (TDD). The requirements for Stable sprints are gathered with testing steps from tracker issues. To allow this process to work effectively, so that requirements are not ambiguous, any new tracker issues must be raised with clear and unambiguous testing instructions. </span></p><p class="c2"><span>Programmers working on the stable sprint will write unit tests and component tests from Q1 of the agile testing quadrants matrix that will prove their fixes to code works. Then they will write their fixes</span></p><h3 class="c6"><span>Continuous Integration</span></h3><p class="c2"><span>To allow early feedback on fixes provided by the stable team they will require their own branch in GIT and their own instance of Jenkins. Developers will check their code into this branch at the end of each day and unit tests will run at check in and again overnight.</span></p><h3 class="c6 c17"><span></span></h3><h3 class="c6"><span>Functional Test Automation</span></h3><p class="c2"><span>Automated functional testing will take place as part of the regular integration cycle.</span></p><h2 class="c6"><span>Major Releases and New Development</span></h2><p class="c0"><span></span></p><p class="c0"><span></span></p><h2 class="c6"><span>Point Releases</span></h2><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><h1 class="c5"><span></span></h1><h1 class="c6"><span class="c3">Managing Legacy Items</span></h1><p class="c0"><span class="c3"></span></p><p class="c0"><span class="c3"></span></p><p class="c0"><span class="c3"></span></p><h1 class="c6"><span class="c3">Hardware Requirements</span></h1><p class="c2"><span>A cloud based server will be used to virtualize all test and build platforms. The server is already in the process of being provisioned.</span></p><p class="c2"><span>Server specifications are:</span></p><p class="c2"><span>Make/Model: Dell T710</span></p><p class="c2"><span>CPU: 2 x Intel Xeon E5645 2.4GHz, 12MB Cache 6 core CPU</span></p><p class="c2"><span>Network: 2 x Broadcom 5709C dual-port gigabit ethernet module</span></p><p class="c2"><span>RAM: 48GB (12x4GB) 1333MHz LV RDIMMS (triple channel)</span></p><p class="c2"><span>Storage: 4 x 600GB 3.5&quot; 15,000 RPM 6GBPS SAS hot plug hard disks with Dell H700 1GB Raid card configured for RAID 10.</span></p><h1 class="c6"><span class="c3">Testing Tools and Their Use</span></h1><p class="c2"><span>All of the tools specified below are free with most being open source and extendible. The advantages are:</span></p><ol class="c12" start="1"><li class="c9 c2"><span>There is no cost to Moodle for licences.</span></li><li class="c9 c2"><span>Applications are web based with a tiny footprint and will run on low spec hardware/VMs.</span></li><li class="c9 c2"><span>Applications with databases all run on MySQL, which is free.</span></li><li class="c9 c2"><span>Moodle can extend the tools/create plugins, in-house, if customisations are required.</span></li></ol><h2 class="c6"><span>Continuous Integration</span></h2><p class="c2"><span>Continuous integration is the process of running tests frequently when code is checked into a repository. The aim of this is to keep code clean and allow the early capture of broken/incomplete code, early warning of conflicting changes (regressions) and a constantly available current &ldquo;build&rdquo; for demo and testing.</span></p><h3 class="c6"><span>Jenkins</span></h3><p class="c2"><span>Jenkins is a fully extendible application that monitors executions of repeated jobs. Results are displayed via a web application.</span></p><p class="c2"><span>Jenkins will be used as an information hub to provide Moodle with continuous feedback about the quality of Moodle software.</span></p><p class="c2"><span>Jenkins can monitor any/multiple GIT repository for changes without adding hooks to the code and be used to run a set of tasks such as:</span></p><ol class="c12" start="1"><li class="c9 c2"><span>Pull git</span></li><li class="c9 c2"><span>Run unit tests</span></li><li class="c9 c2"><span>Create a moodle site</span></li><li class="c9 c2"><span>Add some information to it</span></li><li class="c9 c2"><span>Run the selenium tests</span></li><li class="c9 c2"><span>Report errors/warnings/failures</span></li></ol><h3 class="c6"><span>Phing </span></h3><p class="c2"><span>&ldquo;</span><span class="c14">PH</span><span>ing </span><span class="c14">I</span><span>s </span><span class="c14">N</span><span>ot </span><span class="c14">G</span><span>NU make&rdquo; is a build tool for PHP based upon Apache Ant. Phing commands are specified in XML just like in Ant. Phing can run PHPUnit and SimpleTest unit tests, execute shell commands, perform actions with GIT and much, much more.</span></p><p class="c2"><span>As part of continuous integration Phing will be the engine behind Jenkins, performing tasks like getting the latest code for a test environment for the GIT repository and running unit tests.</span></p><h3 class="c6"><span>&nbsp;Phing Jenkins Plugin</span></h3><p class="c2"><span>This plugin integrates Phing with Jenkins.</span></p><h3 class="c6"><span>Clover PHP Plugin</span></h3><p class="c2"><span>To capture code coverage reports from PHPUnit.</span></p><h3 class="c6"><span>PHPUnit</span></h3><p class="c2"><span>Unit testing tool for PHP; implementation is already planned.</span></p><h3 class="c6"><span>SimpleTest</span></h3><p class="c2"><span>Moodle&#39;s legacy unit testing tool.</span></p><h2 class="c6"><span>Other Automated Testing</span></h2><p class="c2"><span>Methods of testing other than unit testing will be automated. This includes, but is not limited to functional testing.</span></p><h3 class="c6"><span>Selenium</span></h3><p class="c2"><span>Selenium is an extremely powerful, free and fully extendible browser automation tool that contains the following features:</span></p><ol class="c12" start="1"><li class="c9 c2"><span>Selenium IDE &ndash; Firefox plugin app for recording browser interactions with any web application. This is ideal for creating quick bug recreation test scripts and automation aided exploratory testing.</span></li><li class="c9 c2"><span>Selenium Webdriver &ndash; Selenium Server is a server application that runs Selenium test cases. Selenium webdriver is a collection of language specific bindings to drive a browser. </span></li></ol><p class="c2"><span>Selenium provides extensions to existing unit test tools such as JUnit. There are unofficial language bindings for PHPUnit and webdriver and an official backwards compatibility to version one of Selenium through PHPUnit.</span></p><p class="c2"><span>Selenium test cases can be written in an object oriented manner and re-usable methods can be created.</span></p><p class="c2"><span>Selenium is highly resistant to CSS changes and supports using XPath to locate page elements.</span></p><p class="c0"><span></span></p><hr style="page-break-before:always;display:none;"><p class="c2"><span>Furthermore Selenium server can be run in a grid configuration so that tests can run in parallel across multiple test environments controlled by one hub:</span></p><p class="c2"><img height="454" src="images/image09.png" width="642"></p><p class="c0"><span></span></p><hr style="page-break-before:always;display:none;"><p class="c2"><span>When a test is required to run on a specific platform Selenium Grid can be made aware of the environments you wish to use. The Selenium Hub will then ensure that a test runs only on the Selenium slaves providing the requested environment:</span></p><p class="c6"><img height="454" src="images/image10.png" width="642"></p><h3 class="c6"><span>Selenium Jenkins Plugin</span></h3><p class="c2"><span>A Jenkins plugin that gives Jenkins the ability to turn a Jenkins cluster into a Selenium Cluster. The plugin installs Selenium Grid on all of the slaves automatically and sets up the grid on it&#39;s own. Great for deploying the latest code to multiple Selenium test environments automatically.</span></p><h3 class="c6"><span>Firebug</span></h3><p class="c2"><span>Firebug is Firefox plugin that gives a user the ability to easily inspect page source.</span></p><h3 class="c6"><span>Firepath</span></h3><p class="c2"><span>Firepath is a Firefox plugin that can generate XPath expressions.</span></p><h3 class="c6"><span>Eclipse IDE</span></h3><p class="c2"><span>Eclipse IDE will be used to design Selenium test cases.</span></p><h3 class="c6"><span>JUnit/PHPUnit Selenium Extension</span></h3><p class="c2"><span>SeleniumHQ officially support JUnit extensions for Selenium. The JUnit support is more mature than PHPUnit and is fully updated to work with the latest version of Selenium Server.</span></p><h2 class="c6"><span>Hosting Test Environments</span></h2><p class="c2"><span>Hosting instances of Jenkins and test environments will be performed using server virtualization.</span></p><h3 class="c6"><span>XEN</span></h3><p class="c2"><span>Xen is a robust, secure, high performance type 1 baremetal hypervisor, or a virtual machine monitor (VMM). Xen can securely execute multiple virtual machines, each running its own OS, on a single physical system with close-to-native performance. Xen is open source, and it&#39;s used as the core virtualization engine for many vendors products.</span></p><h2 class="c6"><span>Version Control</span></h2><h3 class="c6"><span>GIT</span></h3><p class="c2"><span>Moodle use GIT for version control.</span></p><h2 class="c6"><span>Test Management and Defect Tracking</span></h2><h3 class="c6"><span>TestLink</span></h3><p class="c2"><span>TestLink is a free test management tool written in PHP. The test management tool is used to specify and manage tests and test suites, then report on test execution. A test management tool is useful for managing and co-ordinating organisational testing effort and documenting testing. Currently Moodle use Jira as the test management tool. Jira is software development management tool and not a test management tool.</span></p><p class="c2"><span>In TestLink we can create testing projects, test plans and document test cases, manage test execution runs then log and report results for manual and automated tests.</span></p><h3 class="c6"><span>TestLink Jenkins Plugin</span></h3><p class="c2"><span>This plugin integrates TestLink with Jenkins and generates reports on automated test execution.</span></p><h3 class="c6"><span>Jira</span></h3><p class="c2"><span>Moodle already use Jira for development and project planning and tracking issues.</span></p><h1 class="c6"><span class="c3">Test Environments</span></h1><p class="c2"><span>Test environments for automation will be hosted on the VM server. These will include a CI server (the build machine), database servers, web servers and client PCs. </span></p><h2 class="c6"><span>Requirements Gathering</span></h2><p class="c2"><span>As a task while provisioning the VM Server, two surveys have been run to determine popular Test Platforms. Survey 1 gathered metrics from the Moodle Community and Survey 2 gathered metrics from Moodle Partners. Limiting factors of these surveys are that both samples are relatively small. The results of the surveys are as follows:</span></p><h3 class="c17 c6"><span></span></h3><hr style="page-break-before:always;display:none;"><h3 class="c6"><span>Survey 1 The Moodle Community:</span></h3><p class="c0"><span></span></p><p class="c2"><span>Fig. 1 Separate Database and Web Server Yes/No:</span></p><p class="c2"><img height="312" src="images/image11.png" width="506"></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c2"><span>Fig. 2 Operating System of Separate Web Server:</span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><h1 class="c5"><span></span></h1><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><hr style="page-break-before:always;display:none;"><p class="c2"><span>Fig. 3 Operating System of Separate Database Server:</span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c2"><span>Fig. 4 What Databases are Used on a Split System:</span></p><p class="c2"><img height="240" src="images/image12.png" width="393"></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c2"><span>Fig. 5 What Databases are Used on an all in one Database Server and Webserver:</span></p><p class="c2"><img height="247" src="images/image01.png" width="394"></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><hr style="page-break-before:always;display:none;"><p class="c2"><span>Fig. 6 What Web Server is Used on a Split System:</span></p><p class="c2"><img height="292" src="images/image00.png" width="383"></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c2"><span>Fig. 7 What Web Server is Used on an all in one Database Server and Webserver:</span></p><p class="c2"><img height="299" src="images/image03.png" width="396"></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c2"><span>As Debian and Ubuntu are similar and Red Hat and Centos are similar that,based upon our sample data, our three main operating used by the Moodle community Debian/Ubuntu, Red Hat/Centos and MS Server 2008 with a weighting of almost 75% towards the two Linux operating systems.</span></p><p class="c2"><span>Of the five supported databases, the majority of community users prefer MySQL with PostgreSQL and MSSQL a fairly equal but distant second and third.</span></p><p class="c2"><span>The Majority of community users also use Apache with IIS a very distant second.</span></p><hr style="page-break-before:always;display:none;"><h3 class="c6"><span>Survey 2 The Moodle Partners:</span></h3><p class="c2"><span>Fig. 8 Separate Database and Web Server Yes/No:</span></p><p class="c2"><img height="231" src="images/image02.png" width="380"></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c2"><span>Fig. 9 Partner OS Database Server (combining answers for fig 8):</span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><hr style="page-break-before:always;display:none;"><p class="c2"><span>Fig. 10 Partner OS Web Server (combining answers for fig 8):</span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c2"><span>Fig. 11 &nbsp;What Databases are Used on a Split System:</span></p><p class="c2"><img height="239" src="images/image04.png" width="388"></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c2"><span>Fig. 12 What Databases are Used on a Combined System:</span></p><p class="c2"><img height="249" src="images/image05.png" width="393"></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><hr style="page-break-before:always;display:none;"><p class="c2"><span>Fig. 12 What Web Servers are used on a Split System:</span></p><p class="c2"><img height="295" src="images/image06.png" width="397"></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c2"><span>Fig. 13 What Web Servers are used on a Combined System:</span></p><p class="c2"><img height="297" src="images/image07.png" width="381"></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c0"><span></span></p><p class="c2"><span>This suggests that the majority of partners use Debian/Ubuntu or Centos/Rad Hat Linux, Apache and either a MySQL or PostgreSQL database. </span></p><h2 class="c6"><span>VM Requirements</span></h2><p class="c2"><span>In true agile fashion and to promote flexibility, VM&#39;s for test environments will be modular i.e. they will be separate database servers and web servers. This will allow the mixing and matching of databases and their host OS to the web servers and their host OS as requirements change. At any time, any Web Server can connect to any Database Server. It should also reduce potential numbers of running VMs required for a particular platform.</span></p><p class="c6 c11"><span></span></p><h1 class="c6"><span>A master hub VM is required for Jenkins and the hub for the Selenium grid.</span><hr style="page-break-before:always;display:none;"><span class="c3">Implementation</span></h1><p class="c2"><span>Agile testing guru and automation expert Brian Marick coined the term &ldquo;Hump of Pain&rdquo; to describe the initial phase of implementing test automation. The impact of this hump can be minimised by good planning, good coaching and a strong managerial support for the new processes. As time progresses, particularly as infrastructure becomes implemented, the test cases in the automated suite are completed and the introduced practices become second nature; the hump disappears.</span></p><h2 class="c6"><span>Agile Implementation of Testing Practices</span></h2><p class="c2"><span>Modifications to the process should be made in an incremental manner based up scrum methodology. A series of 2 weekly sprints will be used to time-box test planning and implementation tasks.</span></p><h2 class="c6"><span>Phase 1: Infrastructure and the Integration Process</span></h2><p class="c2"><span>The infrastructure to maintain automated testing effort must be implemented. This process will start with the installation of cloud based hardware at Moodle HQ and the setup of VM&#39;s to support the required test environments.</span></p><p class="c2"><span>The integration process affects quality for the whole organisation as all code must go through the integration process to become &#39;live&#39;. The processes described above will will be initially implemented at integration. Any changes to the existing processes will take place side-by-side with existing processes to manage risk. i.e. existing processes impacted by changes will be maintained in their current state until implementation of changes becomes stable.</span></p><p class="c2"><span>The setup of test environments will initially start with a restricted number of high risk test environments so that the automation process, particularly test cases, can be developed incrementally.</span></p>
<h1 class="c6"><span class="c3">Roles and Responsibilities</span></h1>
<p class="c2"><span>Below is a list of stakeholders and their roles relevant to this document</span></p>
{|  cellpadding="0" cellspacing="0" class="c15"  class="c4"
|  class="c1 c8" | <p class="c6 c18"><span class="c14">Name</span></p>
|  class="c1 c8" | <p class="c18 c6"><span class="c14">Role</span></p>
|  class="c13 c8" | <p class="c18 c6"><span class="c14">Responsibilities</span></p>
|-  class="c4"
|  class="c1" | <p class="c6"><span>Tim Barker</span></p>
|  class="c1" | <p class="c6"><span>Test Manager</span></p>
|  class="c13" | <p class="c6"><span>Co-ordinate testing effort</span></p><p class="c6"><span>Define organisational test strategy and requirements</span></p><p class="c6"><span>Specify test plans and cases</span></p>
|-  class="c4"
|  class="c1" | <p class="c6"><span>Jordan Tomkinson</span></p>
|  class="c1" | <p class="c6"><span>System Administrator</span></p>
|  class="c13" | <p class="c6"><span>Provision of Hardware</span></p><p class="c6"><span>Commission test platforms and supporting infrastructure</span></p>
|-  class="c4"
|  class="c1" | <p class="c6"><span>Martin Dougiamas</span></p>
|  class="c1" | <p class="c6"><span>Moodle Founder and MD</span></p>
|  class="c13" | <p class="c6"><span>Approval</span></p>
|-  class="c4"
|  class="c1" | <p class="c6"><span>Michael de Raadt</span></p>
|  class="c1" | <p class="c6"><span>Development Manager</span></p>
|  class="c13" | <p class="c6"><span>Approval</span></p>
|-  class="c4"
|  class="c1" | <p class="c6"><span>Eloy Lafuente</span></p>
|  class="c1" | <p class="c6"><span>Knight in Shining Armour</span></p>
|  class="c13" | <p class="c6"><span>Technical guidance and advice</span></p>
|-  class="c4"
|  class="c1" | <p class="c6"><span>Helen Foster</span></p>
|  class="c1" | <p class="c6"><span>Community Manager</span></p>
|  class="c13" | <p class="c6"><span>Community liaison with regard to requirements gathering</span></p>
|-  class="c4"
|  class="c1" | <p class="c6"><span>Moodle Developers</span></p>
|  class="c1" | <p class="c6"><span>Development</span></p>
|  class="c13" | <p class="c6"><span>Input into VM requirements</span></p><p class="c6"><span>Design and write unit tests</span></p><p class="c6"><span>Test Execution</span></p><p class="c6"><span>Performance Test Matrix (Sam Hemelryk)</span></p>
|}<p class="c0"><span></span></p><p class="c0"><span></span></p><h1 class="c6"><span class="c3">Training Requirements</span></h1><p class="c0"><span class="c3"></span></p><p class="c0"><span class="c3"></span></p><h1 class="c6"><span class="c3">Useful Resources</span></h1><p class="c0"><span class="c3"></span></p><p class="c2"><span class="c3"><a class="c7" href="http://jenkins-php.org/">Template for Jenkins Jobs for PHP Projects</a></span></p><p class="c2"><span class="c3"><a class="c7" href="http://www.phing.info/trac/">Phing</a></span></p><p class="c2"><span class="c3"><a class="c7" href="https://wiki.jenkins-ci.org/display/JENKINS/Phing+Plugin">Phing Jenkins Plugin</a></span></p><p class="c2"><span class="c3"><a class="c7" href="http://www.teamst.org/">TestLink</a></span></p><p class="c2"><span class="c3"><a class="c7" href="https://wiki.jenkins-ci.org/display/JENKINS/TestLink+Plugin">Testlink Jenkins Plugin</a></span></p><p class="c2"><span class="c3"><a class="c7" href="https://wiki.jenkins-ci.org/display/JENKINS/Clover+PHP+Plugin">Clover Jenkins Plugin</a></span></p><p class="c2"><span class="c3"><a class="c7" href="http://seleniumhq.org/">Selenium</a></span></p><p class="c2"><span class="c3"><a class="c7" href="https://wiki.jenkins-ci.org/display/JENKINS/Selenium+Plugin">Selenium Jenkins Plugin</a></span></p><p class="c0"><span class="c3"><a class="c7" href="https://wiki.jenkins-ci.org/display/JENKINS/Selenium+Plugin"></a></span></p></body></html>